------------------------------------------------------------------------------------------------------





-----------------XML 树结构
XML 文档必须包含根元素。该元素是所有其他元素的父元素。
XML 文档中的元素形成了一棵文档树。这棵树从根部开始，并扩展到树的最底端。
所有的元素都可以有子元素。


-----------------XML 语法规则
XML 文档必须有根元素
XML 声明文件的可选部分，如果存在需要放在文档的第一行，如下所示：
	<?xml version="1.0" encoding="utf-8"?>
XML 元素都必须有一个关闭标签
	声明不是 XML 文档本身的一部分，它没有关闭标签。
XML 标签对大小写敏感
XML 必须正确嵌套
XML 属性值必须加引号
XML 中，一些字符拥有特殊的意义，故有 5 个预定义的实体引用：
	&lt;	<	小于
	&gt;	>	大于
	&amp;	&	＆和号
	&apos;	'	单引号
	&quot;	"	引号
XML 中的注释的语法与 HTML 的语法很相似。
	<!-- This is a comment -->
XML 中，空格会被保留（HTML 会把多个连续的空格字符裁减（合并）为一个）
XML 以 LF 存储换行（Windows：CRLF、Unix 和 Mac OSX：LF、旧的Mac：CR）


-----------------XML 元素
一个元素可以包含：其他元素、文本、属性或混合以上所有...
XML 元素是可扩展，以携带更多的信息。


-----------------XML 命名规则
XML 元素必须遵循以下命名规则：
	名称可以包含字母、数字以及其他的字符
	名称不能以数字或者标点符号开始
	名称不能以字母 xml（或者 XML、Xml 等等）开始
	名称不能包含空格
避免 "-" 、"." 、":" 字符


-----------------XML 属性
属性通常提供不属于数据组成部分的信息（比如文件类型，其与数据无关，但软件处理上却需要它）。
XML 属性必须加引号
XML 中，应该尽量避免使用属性。如果信息感觉起来很像数据，那么请使用元素吧。
	属性不能包含多个值（元素可以）
	属性不能包含树结构（元素可以）
	属性不容易扩展（为未来的变化）
属性难以阅读和维护。
请尽量使用元素来描述数据。而仅仅使用属性来提供与数据无关的信息。
针对元数据的 XML 属性
	有时候会向元素分配 ID 引用。这些 ID 索引可用于标识 XML 元素，它起作用的方式与 HTML 中 id 属性是一样的。
	id 属性仅仅是一个标识符，用于标识不同的便签。它并不是便签数据的组成部分。
元数据（有关数据的数据）应当存储为属性，而数据本身应当存储为元素。


-----------------XML 验证
通过 DTD 验证的XML是"合法"的 XML。
XML DTD
	DTD 的目的是定义 XML 文档的结构。它使用一系列合法的元素来定义文档结构
XML Schema
	W3C 支持一种基于 XML 的 DTD 代替者，它名为 XML Schema
W3C 的 XML 规范声明：如果 XML 文档存在错误，那么程序就不应当继续处理这个文档。理由是，XML 软件应当轻巧，快速，具有良好的兼容性。


-----------------查看 XML 文件
在所有主流的浏览器中，均能够查看原始的 XML 文件。
XML 文档将显示为代码颜色化的根以及子元素。通过点击元素左侧的加号（+）或减号（ - ），可以展开或收起元素的结构。
要查看原始的 XML 源（不包括 + 和 - 符号），选择"查看页面源代码"或从浏览器菜单"查看源文件"。
在没有任何有关如何显示数据的信息的情况下，大多数的浏览器都会仅仅把 XML 文档显示为源代码。





-----------------XML 命名空间
XML 命名空间提供避免元素命名冲突的方法。
XML 中，元素名称是由开发者定义的，当两个不同的文档使用相同的元素名时，就会发生命名冲突。
命名空间是在元素的开始标签的 xmlns 属性中定义的。
	命名空间声明的语法如下。xmlns:前缀="URI"。
命名空间 URI 不会被解析器用于查找信息。其目的是赋予命名空间一个惟一的名称。
	不过，很多公司常常会作为指针来使用命名空间指向实际存在的网页，这个网页包含关于命名空间的信息。


-----------------XML CDATA
XML 文档中的所有文本均会被解析器解析。只有 CDATA 区段中的文本会被解析器忽略。
CDATA - （未解析）字符数据
	术语 CDATA 是不应该由 XML 解析器解析的文本数据。
	像 "<" 和 "&" 字符在 XML 元素中都是非法的。
	"<" 会产生错误，因为解析器会把该字符解释为新元素的开始。
	"&" 会产生错误，因为解析器会把该字符解释为字符实体的开始。
	某些文本，比如 JavaScript 代码，包含大量 "<" 或 "&" 字符。为了避免错误，可以将脚本代码定义为 CDATA。
	CDATA 部分中的所有内容都会被解析器忽略。
	CDATA 部分由 "<![CDATA[" 开始，由 "]]>" 结束
CDATA 部分不能包含字符串 "]]>"。也不允许嵌套的 CDATA 部分。
标记 CDATA 部分结尾的 "]]>" 不能包含空格或换行。


-----------------XML 编码
XML 文档可以包含非 ASCII 字符，比如挪威语 æ ø å，或者法语 ê è é。
	为了避免错误，需要规定 XML 编码，或者将 XML 文件存为 Unicode。
Windows 记事本默认会将文件保存为单字节的 ANSI（ASCII）。选择 "另存为..."，就可以指定 ANSI、UTF-8、Unicode（UTF-16）或 Unicode Big。


-----------------服务器上的 XML
XML 能够通过标准的 Web 服务器轻松地存储和生成。
XML 文件在 Internet 服务器上进行存储的方式与 HTML 文件完全相同。
XML 可在不安装任何 XML 软件的情况下在服务器端生成。
	如需从服务器生成 XML 响应 - 只需简单地编写代码并在 Web 服务器上把它保存为一个 ASP 文件（PHP同理）
	响应的内容类型必须设置为 "text/xml"





-----------------XML 相关技术
XHTML (可扩展 HTML)
	https://www.runoob.com/html/html-xhtml.html
XML DOM (XML 文档对象模型)
	https://www.runoob.com/dom/dom-tutorial.html
XSL (可扩展样式表语言)
	https://www.runoob.com/xsl/xsl-tutorial.html
	XSLT (XSL 转换) - 把 XML 转换为其他格式，比如 HTML
	XSL-FO (XSL 格式化对象)- 用于格式化 XML 文档的语言
	XPath - 用于导航 XML 文档的语言
XQuery (XML 查询语言)
	https://www.runoob.com/xquery/xquery-tutorial.html
DTD (文档类型定义)
	https://www.runoob.com/dtd/dtd-tutorial.html
XSD (XML 架构)
	https://www.runoob.com/schema/schema-tutorial.html
XLink (XML 链接语言)
	https://www.runoob.com/xlink/xlink-tutorial.html




-----------------




-----------------




------------------------------------------------------------------------------------------------------